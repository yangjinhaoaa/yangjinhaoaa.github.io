<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>使用keil v5找不到设备(packs已经安装好)</title>
      <link href="/2019/12/03/2019-12-3blog2/"/>
      <content type="html"><![CDATA[<h2 id="keil-v5找不到设备"><a href="#keil-v5找不到设备" class="headerlink" title="keil v5找不到设备"></a>keil v5找不到设备</h2><a id="more"></a><ul><li>这几天做RFID实验,实验室的试验箱是stm32F103VC的芯片,可是发现我的电脑上的keil arm-mdk不能编译实验用的keil工程 .  发现是我的mdk没有stm32f103的库 . 那我就去包管理器里下载stm32f1xx的包吧 . 可是我下载并安装好之后,发现打开工程时还是找不到芯片,而且<strong>device manager中也找不到stm32f1xx系列的芯片包.</strong></li></ul><p>这个问题困惑了我好长时间 , 也找了好多方法 . 后来在license manager中发现了端倪。 我的product中关于ARM的只有这一项,而这一项中只标明了cortex-M0的芯片,这句话就说明该mdk只允许用户开发关于M0芯片的程序。</p><p><img src="/images/Snipaste_2019-12-03_22-42-10.jpg" alt="只有cortex m0的许可"></p><p>其他芯片即便你安装了相关的packs它也是不支持的 . 看到这我恍然大悟。难怪当时stm32f0系列的包是能够安装上的因为f0系列也是m0的芯片呀<br>出现这原因我想是因为之前用的是stm32g0xx的芯片，所以安装的时候只考虑了该许可。</p><h3 id="那问题就好说了去找个注册机然后将产品许可改成全系列的就可以了嘛"><a href="#那问题就好说了去找个注册机然后将产品许可改成全系列的就可以了嘛" class="headerlink" title="那问题就好说了去找个注册机然后将产品许可改成全系列的就可以了嘛"></a>那问题就好说了去找个注册机然后将产品许可改成全系列的就可以了嘛</h3><p>注册机在下方链接</p><p>是到2023年的</p><p><a href="https://pan.baidu.com/s/1nZvTPEbfS8FBbugnBVScdQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1nZvTPEbfS8FBbugnBVScdQ</a> 提取码:z8o3</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>macOS下stm32开发环境的搭建</title>
      <link href="/2019/12/03/2019-12-3blog1/"/>
      <content type="html"><![CDATA[<h2 id="MacOs中stm32开发环境的搭建"><a href="#MacOs中stm32开发环境的搭建" class="headerlink" title="MacOs中stm32开发环境的搭建"></a>MacOs中stm32开发环境的搭建</h2><a id="more"></a><h3 id="安装stm32cubemx开发工具"><a href="#安装stm32cubemx开发工具" class="headerlink" title="安装stm32cubemx开发工具"></a>安装stm32cubemx开发工具</h3><ul><li><p>从官网下载stm32cubemx安装包 . 注意经过我的测试发现当前最新的5.4.0版本是装不上去的,所以需要下载旧版本的包(5.2.0).该安装包是通用的既可以用于windows也可以用于macos的 . </p></li><li><p>下载好之后解压安装包看到有SetupSTM32CubeMX_v5-2-0.app的文件,<strong>不要直接双击 , 而是右击点显示包内容</strong></p><p><img src="/images/%E6%88%AA%E5%B1%8F2019-12-03%E4%B8%8B%E5%8D%887.51.31.png" alt="显示包内容"></p></li><li><p>接着看到 , Contents目录下MacOs目录下有SetupSTM32CubeMX-5_2_0_macos文件,双击它就可以开始安装了,具体安装步骤不再赘述 .</p><p><img src="/images/%E6%88%AA%E5%B1%8F2019-12-03%E4%B8%8B%E5%8D%887.54.24.png" alt="双击SetupSTM32CubeMX-5_2_0_macos"> </p></li></ul><h3 id="stlink"><a href="#stlink" class="headerlink" title="stlink"></a>stlink</h3><p>在term中输入brew install stlink<br>stlink包含st-flash命令,可以用它来下载程序<br>st-flash write test.bin </p><h3 id="coolTerm串口调试"><a href="#coolTerm串口调试" class="headerlink" title="coolTerm串口调试"></a>coolTerm串口调试</h3><p>(在/dev下也可以看到stlink可以在这里查看串口输出)<br>下载链接在这里<br><a href="http://freeware.the-meiers.org/CoolTermMac.zip" target="_blank" rel="noopener">http://freeware.the-meiers.org/CoolTermMac.zip</a></p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo博客使用</title>
      <link href="/2019/12/01/hello-world/"/>
      <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="创建-new-post"><a href="#创建-new-post" class="headerlink" title="创建 new post"></a>创建 new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><h3 id="发送博客"><a href="#发送博客" class="headerlink" title="发送博客"></a>发送博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo clean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hexo g</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hexo d</span></pre></td></tr></table></figure><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>图片放在source/images文件夹中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">![显示包内容](&#x2F;images&#x2F;截屏2019-12-03下午7.51.31.png)</span></pre></td></tr></table></figure><h3 id="分割摘要和内容"><a href="#分割摘要和内容" class="headerlink" title="分割摘要和内容"></a>分割摘要和内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span></pre></td></tr></table></figure><p>分割摘要和内容</p><h3 id="写文章标签"><a href="#写文章标签" class="headerlink" title="写文章标签"></a>写文章标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">tags: stm32</span></pre></td></tr></table></figure><h3 id="本地查看"><a href="#本地查看" class="headerlink" title="本地查看"></a>本地查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PCM编码</title>
      <link href="/2019/11/20/2019_11_20blog2/"/>
      <content type="html"><![CDATA[<h3 id="A律十三折线编码"><a href="#A律十三折线编码" class="headerlink" title="A律十三折线编码"></a>A律十三折线编码</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><ul><li><p>按照A率十三折编码规范每个样值编为8bit二进制数据</p></li><li><p>采样率8KHz</p></li><li><p>小信号更细大信号更粗</p><h4 id="极性码"><a href="#极性码" class="headerlink" title="极性码"></a>极性码</h4><p>正数是1,</p><h4 id="段落码"><a href="#段落码" class="headerlink" title="段落码"></a>段落码</h4><p>c2,c3,c4 </p><table><thead><tr><th align="center">区间</th><th align="center">c2,c3,c4</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">000</td></tr><tr><td align="center">32</td><td align="center">001</td></tr><tr><td align="center">64</td><td align="center">010</td></tr><tr><td align="center">128</td><td align="center">011</td></tr><tr><td align="center">256</td><td align="center">100</td></tr><tr><td align="center">512</td><td align="center">101</td></tr><tr><td align="center">1024</td><td align="center">110</td></tr><tr><td align="center">2048</td><td align="center">111</td></tr><tr><td align="center">4096</td><td align="center">—-</td></tr></tbody></table></li></ul><p>按照大于X取X</p>]]></content>
      
      
        <tags>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[RFID]RFID标签卡</title>
      <link href="/2019/11/20/2019_11_20blog1/"/>
      <content type="html"><![CDATA[<h2 id="MF1-Mifare-S50"><a href="#MF1-Mifare-S50" class="headerlink" title="MF1-Mifare S50"></a>MF1-Mifare S50</h2><h3 id="工作频率-13-56MHz-执行标准-ISO14443"><a href="#工作频率-13-56MHz-执行标准-ISO14443" class="headerlink" title="工作频率: 13.56MHz 执行标准:ISO14443"></a>工作频率: 13.56MHz 执行标准:ISO14443</h3><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul><li>有16个扇区(Sector) , 每个扇区有4块(block)</li><li>VALUE块可读写加减,普通块可读写,VALUE块可以用做存卡金额的块</li></ul><table><thead><tr><th align="center"></th><th align="center">block0</th><th align="center">block1</th><th align="center">block2</th><th align="center">block3</th></tr></thead><tbody><tr><td align="center">Sector0</td><td align="center">厂商代码</td><td align="center">data</td><td align="center">data</td><td align="center">密码块</td></tr><tr><td align="center">Sector1</td><td align="center">data</td><td align="center">data</td><td align="center">data</td><td align="center">密码块</td></tr><tr><td align="center">Sector2</td><td align="center">data</td><td align="center">data</td><td align="center">data</td><td align="center">密码块</td></tr><tr><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center">……</td></tr><tr><td align="center">Sector16</td><td align="center">data</td><td align="center">data</td><td align="center">data</td><td align="center">密码块</td></tr></tbody></table><ul><li>每个Sector的最后一个block,作为密码块使用, 密码块的结构:</li></ul><table><thead><tr><th>KeyA</th><th>存取控制</th><th>KeyB</th></tr></thead><tbody><tr><td>6byte</td><td>4byte</td><td>6byte</td></tr><tr><td>FF</td><td>07</td><td>86</td></tr></tbody></table><h3 id="存取控制块的结构"><a href="#存取控制块的结构" class="headerlink" title="存取控制块的结构"></a>存取控制块的结构</h3><ul><li>块0的控制位为C10 C20 C30</li><li>块1的控制位为C11 C21 C31</li><li>块3的控制位为C13 C23 C33</li></ul><h4 id="存取控制位的存储结构"><a href="#存取控制位的存储结构" class="headerlink" title="存取控制位的存储结构"></a>存取控制位的存储结构</h4><table><thead><tr><th>位/字节</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>字节6</td><td><u>C23</u></td><td><u>C22</u></td><td><u>C21</u></td><td><u>C20</u></td><td><u>C13</u></td><td><u>C12</u></td><td><u>C11</u></td><td><u>C10</u></td></tr><tr><td>字节7</td><td>C13</td><td>C12</td><td>C11</td><td>C10</td><td><u>C33</u></td><td><u>C32</u></td><td><u>C31</u></td><td><u>C30</u></td></tr><tr><td>字节8</td><td>C33</td><td>C32</td><td>C31</td><td>C30</td><td>C23</td><td>C22</td><td>C21</td><td>C20</td></tr><tr><td>字节9</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>   带下划线表示取反</p><ul><li>使用上面的控制位来设置块012的读写权限(根据下表)<br><img src="E:/Users/yangjinhao/Documents/Tencent%20Files/3124890761/FileRecv/MobileFile/static/image/RFIDpic.jpg" alt="读写权限对照表"><br>例如:当块0的存取控制位是C10 C20 C30=100时表示验证密码A或密码B正确后可读, 验证密码B后可写,不能进行加减值操作</li></ul><h2 id="I·CODE2标签"><a href="#I·CODE2标签" class="headerlink" title="I·CODE2标签"></a>I·CODE2标签</h2><p>唯一ID号 1024bit 13.56MHz</p><h2 id="EM4100卡"><a href="#EM4100卡" class="headerlink" title="EM4100卡"></a>EM4100卡</h2><h3 id="频率125kHz-64bit只读-id卡-TTF"><a href="#频率125kHz-64bit只读-id卡-TTF" class="headerlink" title="频率125kHz 64bit只读(id卡)(TTF)"></a>频率125kHz 64bit只读(id卡)(TTF)</h3><h3 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h3><p>111111111 <strong>9个头</strong></p><table><thead><tr><th align="center">D1</th><th align="center">D2</th><th align="center">D3</th><th align="center">D4</th><th align="center">D5</th><th align="center">D6</th><th align="center">D7</th><th align="center">D8</th><th align="center">D9</th><th align="center">D10</th><th align="center">列校验位1</th></tr></thead><tbody><tr><td align="center">D1</td><td align="center">D2</td><td align="center">D3</td><td align="center">D4</td><td align="center">D5</td><td align="center">D6</td><td align="center">D7</td><td align="center">D8</td><td align="center">D9</td><td align="center">D10</td><td align="center">列校验位2</td></tr><tr><td align="center">D1</td><td align="center">D2</td><td align="center">D3</td><td align="center">D4</td><td align="center">D5</td><td align="center">D6</td><td align="center">D7</td><td align="center">D8</td><td align="center">D9</td><td align="center">D10</td><td align="center">列校验位3</td></tr><tr><td align="center">D1</td><td align="center">D2</td><td align="center">D3</td><td align="center">D4</td><td align="center">D5</td><td align="center">D6</td><td align="center">D7</td><td align="center">D8</td><td align="center">D9</td><td align="center">D10</td><td align="center">列校验位4</td></tr><tr><td align="center">行校验位1</td><td align="center">行校验位2</td><td align="center">行校验位3</td><td align="center">行校验位4</td><td align="center">行校验位5</td><td align="center">行校验位6</td><td align="center">行校验位7</td><td align="center">行校验位8</td><td align="center">行校验位9</td><td align="center">行校验位10</td><td align="center">0</td></tr></tbody></table><p>进入磁场循环发送数据</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[stm32]串口通信printf</title>
      <link href="/2019/11/19/2019_11_19blog1/"/>
      <content type="html"><![CDATA[<h2 id="使用stm32的USART输出数据"><a href="#使用stm32的USART输出数据" class="headerlink" title="使用stm32的USART输出数据"></a>使用stm32的USART输出数据</h2><h3 id="cubemx中新建工程"><a href="#cubemx中新建工程" class="headerlink" title="cubemx中新建工程"></a>cubemx中新建工程</h3><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]app调用系统时间</title>
      <link href="/2019/11/13/2019_11_13blog1/"/>
      <content type="html"><![CDATA[<h3 id="获取年月日"><a href="#获取年月日" class="headerlink" title="获取年月日"></a>获取年月日</h3><h3 id="获取时分秒"><a href="#获取时分秒" class="headerlink" title="获取时分秒"></a>获取时分秒</h3><h3 id="获取星期几"><a href="#获取星期几" class="headerlink" title="获取星期几"></a>获取星期几</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> week=<span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Calendar c = Calendar.getInstance();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">week = (c.get(Calendar.DAY_OF_WEEK));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(week==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    textview.setText(<span class="string">"星期六"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(week==<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    textview.setText(<span class="string">"星期日"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(week==<span class="number">2</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    textview.setText(<span class="string">"星期一"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//……………………</span></span></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[黑苹果]把黑果硬盘的UEFI分区挂载到当前系统</title>
      <link href="/2019/11/11/2019_11_11blog1/"/>
      <content type="html"><![CDATA[<p>windows挂载UEFI分区</p><h3 id="以管理员身份运行命令行"><a href="#以管理员身份运行命令行" class="headerlink" title="以管理员身份运行命令行"></a>以管理员身份运行命令行</h3><h3 id="依次输入"><a href="#依次输入" class="headerlink" title="依次输入"></a>依次输入</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">diskpart</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">选择硬盘 在windows磁盘管理里可以看到硬盘号</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">sel disk 0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">列出硬盘分区</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">list part</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">选择刚才列出的分区的某个分区x</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">sel part x </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">挂载分区并设置盘符G</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">assign letter=g</span></pre></td></tr></table></figure><h2 id="macos操作"><a href="#macos操作" class="headerlink" title="macos操作"></a>macos操作</h2><h3 id="运行终端"><a href="#运行终端" class="headerlink" title="运行终端"></a>运行终端</h3><p>输入 <code>diskutil list</code><br>接着会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;dev&#x2F;disk1 (external, physical):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   #:                       TYPE NAME                    SIZE       IDENTIFIER</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   0:      GUID_partition_scheme                        *16.0 GB    disk1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   1:                        EFI EFI                     209.7 MB   disk1s1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   2:                  macOS High S... 15.7 GB    disk1s2</span></pre></td></tr></table></figure><p>然后输入你要挂载的分区例如<br><code>sudo diskutil mount disk1s1</code></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[stm32]stm32基础-blink</title>
      <link href="/2019/11/08/2019_11_8blog1/"/>
      <content type="html"><![CDATA[<h2 id="stm32的闪灯实验"><a href="#stm32的闪灯实验" class="headerlink" title="stm32的闪灯实验"></a>stm32的闪灯实验</h2><ul><li>材料:开发板NUCLEO-G071RB,软件:MDK-v5(ARM),stm32cubemx</li></ul><h3 id="Task-使板上的灯LD4闪烁"><a href="#Task-使板上的灯LD4闪烁" class="headerlink" title="Task:使板上的灯LD4闪烁"></a>Task:使板上的灯LD4闪烁</h3><h4 id="1-使用stm32cubemx配置引脚"><a href="#1-使用stm32cubemx配置引脚" class="headerlink" title="1.使用stm32cubemx配置引脚"></a>1.使用stm32cubemx配置引脚</h4><ul><li>新建project并选择MPU选择stm32G071RB<br><img src="/images/Snipaste_2019-11-08_20-43-48.jpg" alt="Snipaste_2019-11-08_20-43-48"></li></ul><ul><li><p>找到pinout&amp;config里选择PA5点击并选择GPIO_OUT(我们的led灯就在这里)<br><img src="/images/Snipaste_2019-11-08_20-48-36.jpg" alt="Snipaste_2019-11-08_20-48-36"></p></li><li><p>接下来点击生成代码,进入keil界面改程序<br><img src="/images/Snipaste_2019-11-13_22-41-17.jpg" alt="Snipaste_2019-11-13_22-41-17"><br><img src="/images/Snipaste_2019-11-13_22-42-05.jpg" alt="Snipaste_2019-11-13_22-42-05"></p></li><li><p>在main.c文件中找到while(1){}循环,在循环中添加以下代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);<span class="comment">//这个函数用来翻转引脚的电平状态</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">HAL_Delay(<span class="number">100</span>);<span class="comment">//延时函数</span></span></pre></td></tr></table></figure><p><img src="/images/Snipaste_2019-11-13_22-50-17.jpg" alt="Snipaste_2019-11-13_22-50-17"></p></li><li><p>接下来接下来把开发板插入usb接口,点击这个调试的按钮进入调试模式.<br><img src="/images/placeholder.png" alt="Snipaste_2019-11-13_22-51-24" data-src="/images/Snipaste_2019-11-13_22-51-24.jpg" class="lazyload"></p></li><li><p>在调试模式下点击该按钮,运行程序.<br><img src="/images/placeholder.png" alt="Snipaste_2019-11-13_22-49-52" data-src="/images/Snipaste_2019-11-13_22-49-52.jpg" class="lazyload"></p></li><li><p>接着就可以看到班上的LD4灯在不停的闪烁了.</p></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]使用style封装xml属性</title>
      <link href="/2019/11/07/2019_11_7blog2/"/>
      <content type="html"><![CDATA[<h2 id="今天在改代码的时候算是明白了代码质量的重要性了"><a href="#今天在改代码的时候算是明白了代码质量的重要性了" class="headerlink" title="今天在改代码的时候算是明白了代码质量的重要性了"></a>今天在改代码的时候算是明白了代码质量的重要性了</h2><h3 id="我写的xml里面有几十个TextView控件-这些控件的属性都是相似的-所以就想到在xml文件中能不能将这些属性封装起来-然后挨个调用-一来改起来效率高-而来看起来也舒服-在网上查了下真的有这种方法"><a href="#我写的xml里面有几十个TextView控件-这些控件的属性都是相似的-所以就想到在xml文件中能不能将这些属性封装起来-然后挨个调用-一来改起来效率高-而来看起来也舒服-在网上查了下真的有这种方法" class="headerlink" title="我写的xml里面有几十个TextView控件,这些控件的属性都是相似的.所以就想到在xml文件中能不能将这些属性封装起来,然后挨个调用,一来改起来效率高,而来看起来也舒服. 在网上查了下真的有这种方法"></a>我写的xml里面有几十个TextView控件,这些控件的属性都是相似的.所以就想到在xml文件中能不能将这些属性封装起来,然后挨个调用,一来改起来效率高,而来看起来也舒服. 在网上查了下真的有这种方法</h3><p>具体方法就是:</p><ul><li>在value/style.xml文件中建立一个style<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span> =<span class="string">"mystyle"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>"#003366"<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr></table></figure></li><li>然后在Activity.xml文件中引用这个style就行了<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/TextView1_5"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/tvstyle"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span></pre></td></tr></table></figure></li></ul><p>这是原来的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/TextView1_1"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"#003366"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/TextView1_2"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"#003366"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/TextView1_3"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"#003366"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span></pre></td></tr></table></figure><p>使用后</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[termux]安卓终端termux中安装jdk</title>
      <link href="/2019/11/07/2019_11_7blog1/"/>
      <content type="html"><![CDATA[<h2 id="在Termux中安装Java是个难题"><a href="#在Termux中安装Java是个难题" class="headerlink" title="在Termux中安装Java是个难题"></a>在Termux中安装Java是个难题</h2><h3 id="在github上有人做了一个一键安装JDK8的脚本-只需一行命令就可以将Java装到你的手机上了"><a href="#在github上有人做了一个一键安装JDK8的脚本-只需一行命令就可以将Java装到你的手机上了" class="headerlink" title="在github上有人做了一个一键安装JDK8的脚本 只需一行命令就可以将Java装到你的手机上了"></a>在github上有人做了一个一键安装JDK8的脚本 只需一行命令就可以将Java装到你的手机上了</h3><p>链接在这里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">这是作者给出的说明</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">To install Java, open Termux and execute the following command:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;sh</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">pkg install wget &amp;&amp; wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;MasterDevX&#x2F;java&#x2F;master&#x2F;installjava &amp;&amp; bash installjava</span></pre></td></tr></table></figure><p>只需将上述命令粘贴到termux中就可以了</p><p>这里作者遇到了一个问题就是当运行java时就会显示killed<br>所以最终也没有安装上.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]java代码中的@Override符号意义</title>
      <link href="/2019/11/02/2019_11_2blog1/"/>
      <content type="html"><![CDATA[<h3 id="Override是伪代码-表示重写。"><a href="#Override是伪代码-表示重写。" class="headerlink" title="@Override是伪代码,表示重写。"></a>@Override是伪代码,表示重写。</h3><h4 id="带着这个符号之后-编译器可以给你验证-Override下面的方法名是否是你父类中所有的，如果没有则报错"><a href="#带着这个符号之后-编译器可以给你验证-Override下面的方法名是否是你父类中所有的，如果没有则报错" class="headerlink" title="带着这个符号之后,编译器可以给你验证@Override下面的方法名是否是你父类中所有的，如果没有则报错."></a>带着这个符号之后,编译器可以给你验证@Override下面的方法名是否是你父类中所有的，如果没有则报错.</h4><p>Android开发中经常看到下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      setContentView(R.layout.activity_main); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr></table></figure><p>如果上面的代码我写了@Override,而下面写成了protect void oncreate这时编译器就会报错<br>然而,如果上面的代码我没加@Override下面写成了protect void oncreate编译器就不会报错.</p><h3 id="Override可以起到注释和代码检查的作用"><a href="#Override可以起到注释和代码检查的作用" class="headerlink" title="Override可以起到注释和代码检查的作用."></a>Override可以起到注释和代码检查的作用.</h3><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]去除app标题栏</title>
      <link href="/2019/10/31/2019_10_31blog1/"/>
      <content type="html"><![CDATA[<h2 id="有时候觉得这个默认的标题栏很碍事-没什么用还占用了大部分屏幕空间"><a href="#有时候觉得这个默认的标题栏很碍事-没什么用还占用了大部分屏幕空间" class="headerlink" title="有时候觉得这个默认的标题栏很碍事 ,没什么用还占用了大部分屏幕空间"></a>有时候觉得这个默认的标题栏很碍事 ,没什么用还占用了大部分屏幕空间</h2><p><img src="K:%5Cblog%5Cmyblog%5Cstatic%5Cimages%5C1572519883437.png" alt="1572519883437"></p><h3 id="该怎么去除呢"><a href="#该怎么去除呢" class="headerlink" title="该怎么去除呢?"></a>该怎么去除呢?</h3><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><p>将res/value下的style文件中的DarkActionBar改为NoActionBar就可以了,如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span></span></pre></td></tr></table></figure><p>改成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span></pre></td></tr></table></figure><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>检查Java中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;.....&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">将其中的将extends AppCompatActivity继承改成extends Activity</span></pre></td></tr></table></figure><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]监听器使用</title>
      <link href="/2019/10/22/2019_10_22blog2/"/>
      <content type="html"><![CDATA[<h3 id="监听器使用"><a href="#监听器使用" class="headerlink" title="监听器使用"></a>监听器使用</h3><h4 id="1-第一种方法-使用匿名内部类"><a href="#1-第一种方法-使用匿名内部类" class="headerlink" title="1.第一种方法,使用匿名内部类"></a>1.第一种方法,使用匿名内部类</h4><p>(1).在activity中声明对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Button butn;</span></pre></td></tr></table></figure><p>(2).在onCreate函数中初始化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ..........</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    butn = (Button)findViewById(R.id.button);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>(3).设置监听器.注意在文件开始要导入android.view.View.OnClickListener;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">butn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    .........</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>(4).重写OnClick方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    print.setText(<span class="string">"you click it"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="第二种方法-使用内部类"><a href="#第二种方法-使用内部类" class="headerlink" title="第二种方法,使用内部类"></a>第二种方法,使用内部类</h3><p>(1)~(2)实现定义并初始化对象<br>(3)设置监听器(在onCreate里写),new一个内部对象(内部对象根据(4)中定义的类来new,作为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">btnshow.setOnClickListener(<span class="keyword">new</span> buttonClickListener());</span></pre></td></tr></table></figure><p>(4)定义刚才的内部类,继承View.OnClickListener接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">buttonClickListener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123; <span class="comment">//buttonClickListener的名字随意与(4)中一致即可</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            print.setText(<span class="string">"点击实现"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        &#125;    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="第三种方法-使用Activity作为监听器"><a href="#第三种方法-使用Activity作为监听器" class="headerlink" title="第三种方法,使用Activity作为监听器"></a>第三种方法,使用Activity作为监听器</h3><p>(1)让MainActivity使用OnClickListener接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ................................</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>(2)定义并初始化按钮对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Button btn;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">btn=(Button)findViewById(R.id.button);</span></pre></td></tr></table></figure><p>(3)在Activity中重写onClick方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    print.setText(<span class="string">"you click it"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="第四种方法-绑定xml标签"><a href="#第四种方法-绑定xml标签" class="headerlink" title="第四种方法,绑定xml标签"></a>第四种方法,绑定xml标签</h3><p>(1)[xml]在xml文件下的Button标签下添加一条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">android:onClick="btnclick"</span></pre></td></tr></table></figure><p>(2)[java]在Activity中写xml中的方法(无需定义并初始化按钮对象)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnclick</span><span class="params">(View source)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        print.setText(<span class="string">"you click it"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]使用SharedPreferences保存用户数据</title>
      <link href="/2019/10/22/2019_10_22blog1/"/>
      <content type="html"><![CDATA[<h3 id="使用SharedPreferences类保存应用程序数据"><a href="#使用SharedPreferences类保存应用程序数据" class="headerlink" title="使用SharedPreferences类保存应用程序数据"></a>使用SharedPreferences类保存应用程序数据</h3><p>当Android需要记住用户名密码或者其他用户偏好数据时用SharedPreferences是最划算的方法,它就相当于用户个人配置文件可以保存较小规模的数据,当使用该类时,在data\包名\shared_pres\路径下生成一个.xml文件.<br>xml文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"text1"</span>&gt;</span>今年多大<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个SharedPreferences</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">SharedPreferences sharedPreferences =getSharedPreferences(<span class="string">"data"</span>,Context.MODE_PRIVATE);<span class="comment">//data为生成的xml文件的文件名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.实例化SharedPreferences.Editor对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">SharedPreferences.Editor editor= sharedPreferences.edit();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.将获取来的值放进文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">editor.putString(<span class="string">"name"</span>, <span class="string">"xiaoming"</span>);<span class="comment">//将xiaoming字符串(xiaoming字符串可以用字符串变量代替)写进name标签的字符串中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">editor.putInt(<span class="string">"age"</span>,<span class="number">3</span>);<span class="comment">//将3写进age字符串</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.提交更改</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">editor.commit();</span></pre></td></tr></table></figure><h4 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">SharedPreferences sharedPreferences=getSharedPreferences(<span class="string">"data"</span>,Context.MODE_PRIVATE);<span class="comment">//生成data.xml</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">String userId=sharedPreferences.getString(<span class="string">"name"</span>,<span class="string">""</span>);<span class="comment">//将name标记的字符串传到userId字符串中</span></span></pre></td></tr></table></figure><h4 id="删除指定数据"><a href="#删除指定数据" class="headerlink" title="删除指定数据"></a>删除指定数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">editor.remove(<span class="string">"name"</span>);删除name标记的字符串</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">editor.commit();</span></pre></td></tr></table></figure><h4 id="清空数据"><a href="#清空数据" class="headerlink" title="清空数据"></a>清空数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">editor.clear();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">editor.commit();</span></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Java]StringBuild类的使用</title>
      <link href="/2019/10/21/2019_10_21blog2/"/>
      <content type="html"><![CDATA[<h3 id="先来段代码"><a href="#先来段代码" class="headerlink" title="先来段代码"></a>先来段代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    sb.append(<span class="string">"呵呵 * "</span> + i + <span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">txt_show.setText(sb.toString());    <span class="comment">//这里的txt_show是一个显示文本的对象</span></span></pre></td></tr></table></figure><p>一开始看到这个StringBuilder感觉很怪到底是什么呢 后来查了下感觉它跟String类是相似的</p><h4 id="不同之处在于"><a href="#不同之处在于" class="headerlink" title="不同之处在于"></a>不同之处在于</h4><p>StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。<br>然而String类是被final修饰的他的长度是不可变的,拼接字符串是要形成新的对象的,所以String一旦发生长度变化是耗费内存的<br>StringBuilder 类在 和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的.</p><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[sublime]显示行号</title>
      <link href="/2019/10/21/2019_10_21blog1/"/>
      <content type="html"><![CDATA[<h4 id="sublime是默认不显示行号的-虽然状态栏有当前的行号但是看起来还是不直观-特别是拍错的时候"><a href="#sublime是默认不显示行号的-虽然状态栏有当前的行号但是看起来还是不直观-特别是拍错的时候" class="headerlink" title="sublime是默认不显示行号的.虽然状态栏有当前的行号但是看起来还是不直观,特别是拍错的时候."></a>sublime是默认不显示行号的.虽然状态栏有当前的行号但是看起来还是不直观,特别是拍错的时候.</h4><p>只需在preference-&gt;settings-&gt;user中添加下面两行就可以显示行号了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">"show_encoding": true,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">"show_line_endings": true</span></pre></td></tr></table></figure><p>注意逗号的位置.</p><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[工具]github克隆加速方法(新)</title>
      <link href="/2019/10/20/2019_10_20blog2/"/>
      <content type="html"><![CDATA[<h4 id="想从github上下载大文件的时候常常发现下载速度慢的出奇"><a href="#想从github上下载大文件的时候常常发现下载速度慢的出奇" class="headerlink" title="想从github上下载大文件的时候常常发现下载速度慢的出奇"></a>想从github上下载大文件的时候常常发现下载速度慢的出奇</h4><p>主要原因是dns不行</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>从github上随便找个项目克隆下,然后下载的时候找到下载网址如图: 我的是github-production-release-asset-2e65be.s3.amazonaws.com<br><img src="K:%5Cblog%5Cmyblog%5Cstatic%5Cimages%5CSnipaste_2019-10-20_16-42-52.jpg" alt="Snipaste_2019-10-20_16-42-52"></li><li>到这个网站<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a> 查找刚才记下的网址的Dns我查到的是52.216.238.75,记下这个IP地址</li><li>找到HOST文件添加之前查到的Dns解析,如图:<img src="K:%5Cblog%5Cmyblog%5Cstatic%5Cimages%5CSnipaste_2019-10-20_16-48-44.jpg" alt="Snipaste_2019-10-20_16-48-44"></li><li>刷新Dns,cmd中输入 ipconfig /flushdns</li></ul><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[工具]代码自动补全工具TabNine</title>
      <link href="/2019/10/19/2019_10_20blog1/"/>
      <content type="html"><![CDATA[<h3 id="一款用人工智能实现代码填充的工具"><a href="#一款用人工智能实现代码填充的工具" class="headerlink" title="一款用人工智能实现代码填充的工具"></a>一款用人工智能实现代码填充的工具</h3><p>可以在很多平台实用.例如sublime-text,vim等.</p><p>在sublime平台直接加载插件就可以了即装即用.但是在vim平台装起来就很麻烦</p><h4 id="在windows端的vim安装-这个过程太煎熬了会分成几个部分"><a href="#在windows端的vim安装-这个过程太煎熬了会分成几个部分" class="headerlink" title="在windows端的vim安装(这个过程太煎熬了会分成几个部分):"></a>在windows端的vim安装(这个过程太煎熬了会分成几个部分):</h4><ul><li><p>vim(要支持python版本的)可以用vim –version查看是不是有+python2(dyn)或者+python3(dyn)如果是-号就说明没有支持python就需要去下载带python的版本来用,链接:<a href="https://github.com/vim/vim-win32-installer/releases" target="_blank" rel="noopener">https://github.com/vim/vim-win32-installer/releases</a></p></li><li><p>vundle支持</p></li><li><p>YouCompleteMe插件支持</p></li><li><p>git</p></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[工具]代码自动补充工具</title>
      <link href="/2019/10/17/2019_10_17blog1/"/>
      <content type="html"><![CDATA[<p>发现一个插件叫做tabnine可以根据你的输入习惯自动补全代码.</p><h3 id="支持很多语言"><a href="#支持很多语言" class="headerlink" title="支持很多语言"></a>支持很多语言</h3><h3 id="支持很多IDE"><a href="#支持很多IDE" class="headerlink" title="支持很多IDE"></a>支持很多IDE</h3><p>链接<a href="https://tabnine.com/" target="_blank" rel="noopener">https://tabnine.com/</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Linux]ssh连接的建立</title>
      <link href="/2019/10/16/2019_10_16blog1/"/>
      <content type="html"><![CDATA[<h3 id="win10通过ssh连接ubuntu"><a href="#win10通过ssh连接ubuntu" class="headerlink" title="win10通过ssh连接ubuntu"></a>win10通过ssh连接ubuntu</h3><h4 id="被连接机器配置"><a href="#被连接机器配置" class="headerlink" title="被连接机器配置"></a>被连接机器配置</h4><ul><li>待连接机器,与主机处于同一局域网</li><li>检查ubuntu是否安装ssh<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">输入ssh -v</span></pre></td></tr></table></figure>得到如下结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">1@ubuntu:~$ ssh -v</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">OpenSSH_5.9p1 Debian-5ubuntu1.10, OpenSSL 1.0.1 14 Mar 2012</span></pre></td></tr></table></figure>说明已经安装ssh无需再次安装</li><li>如果没有安装ssh用以下命令安装sudo apt-get install openssh-server</li><li>开启ssh服务sudo service ssh start</li><li>ifconfig 获取机器IP地址<h4 id="连接机器配置"><a href="#连接机器配置" class="headerlink" title="连接机器配置"></a>连接机器配置</h4></li><li>进入cmd输入ssh -p port username@ip 默认端口22 username登录用户名 ip待连接机器ip地址</li></ul><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]设置view控件的可见性</title>
      <link href="/2019/10/15/2019_10_15blog3/"/>
      <content type="html"><![CDATA[<h4 id="可见（visible"><a href="#可见（visible" class="headerlink" title="可见（visible)"></a>可见（visible)</h4><p>XML文件：android:visibility=”visible”</p><p>Java代码：view.setVisibility(View.VISIBLE);</p><h4 id="不可见（invisible）"><a href="#不可见（invisible）" class="headerlink" title="不可见（invisible）"></a>不可见（invisible）</h4><p>XML文件：android:visibility=”invisible”</p><p>Java代码：view.setVisibility(View.INVISIBLE);</p><h4 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h4><p>隐藏控件,将当前控件从layout中隐藏,如果是线性布局 则将此控件下方控件上移.</p><h4 id="END"><a href="#END" class="headerlink" title="END"></a>END</h4>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]点击多次按钮产生不同的响应</title>
      <link href="/2019/10/15/2019_10_15blog2/"/>
      <content type="html"><![CDATA[<h5 id="开发过程中遇到问题-希望实现点击一次按钮实现一次响应-在点击一下又产生不同的响应"><a href="#开发过程中遇到问题-希望实现点击一次按钮实现一次响应-在点击一下又产生不同的响应" class="headerlink" title="开发过程中遇到问题:希望实现点击一次按钮实现一次响应,在点击一下又产生不同的响应."></a>开发过程中遇到问题:希望实现点击一次按钮实现一次响应,在点击一下又产生不同的响应.</h5><h5 id="一开始通过嵌套监听来实现但是只能实现一次"><a href="#一开始通过嵌套监听来实现但是只能实现一次" class="headerlink" title="一开始通过嵌套监听来实现但是只能实现一次."></a>一开始通过嵌套监听来实现但是只能实现一次.</h5><h5 id="后来找到以下方法来实现"><a href="#后来找到以下方法来实现" class="headerlink" title="后来找到以下方法来实现"></a>后来找到以下方法来实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">TextView1_1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;<span class="comment">//点击实现类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">//@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;<span class="comment">//设置flag变量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                    input1.setText(<span class="string">"flag0"</span>);<span class="comment">//实现方法1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                    input1.setText(<span class="string">"flag1"</span>);<span class="comment">///实现方法2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">2</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                    input1.setText(<span class="string">"flag2"</span>);<span class="comment">//执行方法3（对应功能3)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                flag=(flag+<span class="number">1</span>)%<span class="number">3</span>;<span class="comment">//其余得到循环执行上面3个不同的功能</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr></table></figure><h5 id="END"><a href="#END" class="headerlink" title="END"></a>END</h5>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]APP像素</title>
      <link href="/2019/10/15/2019_10_15blog1/"/>
      <content type="html"><![CDATA[<h3 id="像素单位"><a href="#像素单位" class="headerlink" title="像素单位"></a>像素单位</h3><ul><li>px:<strong>像素</strong></li><li>in:英寸</li><li>mm:毫米</li><li>pt:磅</li><li>dp:<strong>与设备无关</strong></li><li>sp:<strong>设置字体大小</strong><br>开发时尽量使用dp,字体用sp</li></ul><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]颜色的定义</title>
      <link href="/2019/10/14/2019_10_14blog1/"/>
      <content type="html"><![CDATA[<h3 id="Android-studio中关于颜色的定义"><a href="#Android-studio中关于颜色的定义" class="headerlink" title="Android studio中关于颜色的定义;"></a>Android studio中关于颜色的定义;</h3><ol><li>用8位十六进制数描述(ARGB)Alpha透明度,R红色,G绿色,B蓝色.数值在0<del>255之间(00</del>ff),例如#FF99CC00,(FF)不透明,99,CC,00红绿蓝的颜色值</li><li>用6位十六进制数描述RGB值,无透明度描述.</li><li>在app中的value目录下有color.xml文件里面封装好了颜色变量例如 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">public static final int BLACK = 0xFF000000;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public static final int DKGRAY = 0xFF444444;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">public static final int GRAY = 0xFF888888;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">public static final int LTGRAY = 0xFFCCCCCC;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">public static final int WHITE = 0xFFFFFFFF;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">public static final int RED = 0xFFFF0000;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">public static final int GREEN = 0xFF00FF00;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">public static final int BLUE = 0xFF0000FF;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">public static final int YELLOW = 0xFFFFFF00;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">public static final int CYAN = 0xFF00FFFF;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">public static final int MAGENTA = 0xFFFF00FF;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">public static final int TRANSPARENT = 0;</span></pre></td></tr></table></figure></li><li>定义color为某颜色变量<ul><li>int color= 0xff00ff00;</li><li>int color=Color.argb(127,255,0,255);</li><li>int color=Color.parseColor(“#00CCFF”);</li></ul></li><li>Java代码中的设置TextView颜色<ul><li>textView.setTextColor(Color.RED);        //调用Color文件中的</li><li>textView.setTextColor(0xffff0000);        //八进制颜色</li><li>textView.setTextColor(Color.argb(127,255,0,255));颜色转换方法<h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3></li></ul></li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Linux]Linux命令</title>
      <link href="/2019/10/14/2019_10_11blog6/"/>
      <content type="html"><![CDATA[<h3 id="linux命令-UBUNTU-为例"><a href="#linux命令-UBUNTU-为例" class="headerlink" title="linux命令(UBUNTU 为例)"></a>linux命令(UBUNTU 为例)</h3><h4 id="1-cd命令"><a href="#1-cd命令" class="headerlink" title="1. cd命令"></a>1. cd命令</h4><pre><code>cd ~    :回到主目录cd .. :回到上一级目录</code></pre><h4 id="2-ls命令"><a href="#2-ls命令" class="headerlink" title="2. ls命令"></a>2. ls命令</h4><h4 id="3-pwd命令"><a href="#3-pwd命令" class="headerlink" title="3. pwd命令"></a>3. pwd命令</h4><h4 id="4-touch命令"><a href="#4-touch命令" class="headerlink" title="4. touch命令"></a>4. touch命令</h4><h4 id="5-rm命令"><a href="#5-rm命令" class="headerlink" title="5. rm命令"></a>5. rm命令</h4><pre><code>rm hello.txt 删除目录 rm -r name.exmame</code></pre><h4 id="6-cp命令"><a href="#6-cp命令" class="headerlink" title="6. cp命令"></a>6. cp命令</h4><pre><code>cp name1 name2 复制name1到name1cp -r  dir1 dir2 复制文件夹</code></pre><h4 id="7-mv命令"><a href="#7-mv命令" class="headerlink" title="7. mv命令"></a>7. mv命令</h4><pre><code>mv filename dir 移动filename文件到dir文件夹mv dir1 dir2移动目录dir1到dir2 可以作为重命名命令mv name.c name1.c 将name文件重命名成为name1.c</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Java]关于接口</title>
      <link href="/2019/10/11/2019_10_11blog5/"/>
      <content type="html"><![CDATA[<h3 id="java接口"><a href="#java接口" class="headerlink" title="java接口"></a>java接口</h3><ul><li>java接口是一个抽象类,是抽象方法的集合,接口通常以interface来声明.一个类通过继承接口的方式,从而继承接口的抽象方法.</li><li>接口不是类,类描述对象的属性和方法.接口则包含类要实现的方法.</li><li>接口无法被实例化,但是可以被实现.</li><li>接口中的每一个方法都是隐式抽象的<h3 id="抽象类和借口的区别"><a href="#抽象类和借口的区别" class="headerlink" title="抽象类和借口的区别"></a>抽象类和借口的区别</h3></li><li>抽象类中的方法可以有方法体,就是能实现方法的具体功能,但是接口中的方法不行</li><li>抽象类中的成员变量可以是各种类型的,而接口中的成员变量只能是public static Final类型的</li><li>接口中不能含有静态代码以及静态方法(jdk1.8后接口可以有静态方法和方法体<br>Animal.java文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>Mammalnt.java文件<pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mammalnt</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>{  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{      System.out.println(<span class="string">"mammal eats"</span>);  }  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>{      System.out.println(<span class="string">"Mammal travels"</span>);  }<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>{  Mammallnt m = <span class="keyword">new</span> Mammallnt();  m.eat();  m.travel();}}</code></pre></li></ul><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Java]static修饰符</title>
      <link href="/2019/10/11/2019_10_11blog4/"/>
      <content type="html"><![CDATA[<h3 id="static表示类变量-函数"><a href="#static表示类变量-函数" class="headerlink" title="static表示类变量/函数"></a>static表示类变量/函数</h3><p>static变量/函数属于当前类而不属于该类形成的对象.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>[Android]AndroidManifest文件的说明</title>
      <link href="/2019/10/11/2019_10_11blog3/"/>
      <content type="html"><![CDATA[<h2 id="AndroidManifest-xml用于指定APP内部的运行配置"><a href="#AndroidManifest-xml用于指定APP内部的运行配置" class="headerlink" title="AndroidManifest.xml用于指定APP内部的运行配置"></a>AndroidManifest.xml用于指定APP内部的运行配置</h2><p>常用属性如下:</p><ul><li>android:allowBackup,用于指定是否允许备份,开放阶段true上线时选false.</li><li>android:icon用于指定APP的图标</li><li>android:label用于指定APP名称</li><li>android:supportsRtl设置是否支持从右向左显示的文字</li><li>android:theme指定显示风格</li><li>示例文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">xmlns:dist</span>=<span class="string">"http://schemas.android.com/apk/distribution"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.example.schedule_list"</span>&gt;</span>//指定应用程序包名</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dist:module</span> <span class="attr">dist:instant</span>=<span class="string">"true"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span>//是否可备份</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span>//<span class="attr">APP</span>图标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>//<span class="attr">APP</span>名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span>//圆形图标</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span></pre></td></tr></table></figure>第二个例子<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">          <span class="attr">package</span>=<span class="string">"com.sample.teapot"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">          <span class="attr">android:versionCode</span>=<span class="string">"1"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">          <span class="attr">android:versionName</span>=<span class="string">"1.0.0.1"</span> &gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:glEsVersion</span>=<span class="string">"0x00020000"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-feature</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">application</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">      <span class="attr">android:allowBackup</span>=<span class="string">"false"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">      <span class="attr">android:fullBackupContent</span>=<span class="string">"false"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">      <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">      <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">      <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">      <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="tag">      <span class="attr">android:name</span>=<span class="string">"com.sample.teapot.TeapotApplication"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="tag">      &gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- Our activity is the built-in NativeActivity framework class.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">         This will take care of integrating with our NDK code. --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.sample.teapot.TeapotNativeActivity"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="tag">              <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="tag">              <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!-- Tell NativeActivity the name of our .so --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="tag">                 <span class="attr">android:value</span>=<span class="string">"TeapotNativeActivity"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span></pre></td></tr></table></figure></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Java对象的交互</title>
      <link href="/2019/10/11/2019_10_11blog2/"/>
      <content type="html"><![CDATA[<h4 id="一个时钟程序-minute自加并打印值到59时变成零同时hour加一-hour到23后变成零"><a href="#一个时钟程序-minute自加并打印值到59时变成零同时hour加一-hour到23后变成零" class="headerlink" title="一个时钟程序,minute自加并打印值到59时变成零同时hour加一,hour到23后变成零."></a>一个时钟程序,minute自加并打印值到59时变成零同时hour加一,hour到23后变成零.</h4><ul><li>display .java文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Display</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> limit = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> value = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Display</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.limit = limit;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">value++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value == limit) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">value = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getvalue</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">Display minute = <span class="keyword">new</span> Display(<span class="number">59</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">minute.increase();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">System.out.println(minute.getvalue());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>Clock.java文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clock</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Display minute = <span class="keyword">new</span> Display(<span class="number">59</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Display hour = <span class="keyword">new</span> Display(<span class="number">24</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">minute.increase();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (minute.getvalue() == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">hour.increase();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%02d:%02d\n"</span>,hour.getvalue(),minute.getvalue());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">Clock a = <span class="keyword">new</span> Clock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">a.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="关键问题在于怎样实现minute对象与hour对象之间的交互"><a href="#关键问题在于怎样实现minute对象与hour对象之间的交互" class="headerlink" title="关键问题在于怎样实现minute对象与hour对象之间的交互"></a>关键问题在于怎样实现minute对象与hour对象之间的交互</h4><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>windows平台更好用的terminal(cmd)</title>
      <link href="/2019/10/09/2019_10_10blog1/"/>
      <content type="html"><![CDATA[<p>windows平台上的终端工具被诟病已久,我也尝试过很多工具,现在发现了一个新的工具叫做Cmder感觉是我的菜!</p><h3 id="window自带cmd"><a href="#window自带cmd" class="headerlink" title="window自带cmd"></a>window自带cmd</h3><ul><li>没法使用一些linux命令,比如touch,ls这些都没有,要想用cmd用舒服了还要学习一套windows命令,学习成本高.</li><li>用户界面太丑,那看的难受的宋体实在忍受不了,没法自定义颜色,透明度等等.<h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3></li><li>这个也是windows自带的,但是只有win10部分版本支持.</li><li>有些linux命令还是不能使用的</li><li>界面还是不能定制<h3 id="Windows-Terminal-Preview"><a href="#Windows-Terminal-Preview" class="headerlink" title="Windows Terminal (Preview)"></a>Windows Terminal (Preview)</h3></li><li>这是window10新做的一款uwp应用在微软应用商店可以下载到</li><li>只支持Windows 10 版本 18362.0 或更高版本,但是我的电脑是14393的显然不能用啊<h2 id="Cmder"><a href="#Cmder" class="headerlink" title="Cmder"></a>Cmder</h2>今天的主角,支持大部分Unix/linux命令,可以深度自定义;可以改字体,字号颜色等等.<br>具体特性博主也在探索,欢迎大家一起来探索.<br>另外这是个开源项目在官网可以找到github地址,有大佬也可以拿来研究.<br>官网地址:<br><a href="https://cmder.net/" target="_blank" rel="noopener">Cmder官网</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Java面向对象特性</title>
      <link href="/2019/10/08/2019_10_8blog1/"/>
      <content type="html"><![CDATA[<h2 id="Java面向对象特性"><a href="#Java面向对象特性" class="headerlink" title="Java面向对象特性"></a>Java面向对象特性</h2><h3 id="1-封装性"><a href="#1-封装性" class="headerlink" title="1.封装性"></a>1.封装性</h3><p>Java中把对象的各个属性组合成一个独立单位<br> 修饰符:</p><ol><li>default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li>private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）</li><li>public : 对所有类可见。使用对象：类、接口、变量、方法</li><li>protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aclass</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"class father"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateoutput</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"class私有方法"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getprivateoutput</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">privateoutput();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">classfeature</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">Aclass father1 = <span class="keyword">new</span> Aclass();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">father1.output();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">father1.getprivateoutput();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="2-继承性"><a href="#2-继承性" class="headerlink" title="2. 继承性"></a>2. 继承性</h3><ol><li>子类拥有父类非 private 的属性、方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li></ol><p>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 A 类继承 B 类，B 类继承 C 类，所以按照关系就是 C 类是 B 类的父类，B 类是 A 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> featureextend;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下是父类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fatherclass</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Fatherclass()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"这是构造方法的输出"</span>);<span class="comment">//构造方法:方法名与类名一致,可以有参数,可以方法重载,不能有return,没有void修饰</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printastring</span><span class="params">(String str)</span> </span>&#123;<span class="comment">//父类中的方法用default修饰的方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">System.out.println(str);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printastring</span><span class="params">()</span> </span>&#123;<span class="comment">//父类中的方法用default修饰的方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"无参数的方法,即printastring的方法重载"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printhello</span><span class="params">()</span> </span>&#123;<span class="comment">//父类中用proteced修饰的父方法;protect修饰的可以用于子类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"hello"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下是子类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sonclass</span> <span class="keyword">extends</span> <span class="title">Fatherclass</span>  </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sunsprint</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"子类的方法"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classextend</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">Sonclass aobject=<span class="keyword">new</span> Sonclass();<span class="comment">//这里会调用构造方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">aobject.printastring(<span class="string">"fatherprint"</span>);<span class="comment">//程序26行new的是子对象,但是它继承了父对象的方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">aobject.printastring();<span class="comment">//同一个方法但不同参数的方法的重载 多态性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">aobject.printhello();<span class="comment">//父类中用protected关键字修饰的方法是可以继承到子类的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">aobject.sunsprint();                    <span class="comment">//子类的方法也可以被调用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="3-多态性"><a href="#3-多态性" class="headerlink" title="3. 多态性"></a>3. 多态性</h3><p>方法重写是一种多态性的体现</p><p>本例示例代码见我的github <a href="https://github.com/yangjinhaoaa/sdjzu_java_practice/githubjava-2019-10-8classfeature" target="_blank" rel="noopener">https://github.com/yangjinhaoaa/sdjzu_java_practice/githubjava-2019-10-8classfeature</a> 和java-2019-10-9classfeatureextend</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>git中忽略指定格式的文件</title>
      <link href="/2019/09/29/2019_9_29blog6/"/>
      <content type="html"><![CDATA[<p>将eclipse-workspace同步到github仓库中，发现有个.metadata文件夹占用量很大还有java生成的.class文件这些事不需要推到github上的,所以就做了忽略处理.</p><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>.gitignore文件就是设置忽略项的文件<br>可以在该文件内设置忽略指定路径,指定文件,可以使用通配符 <code>* &amp;</code> </p><h4 id="例如该-gitignore文件可以忽略-hello-文件夹-metadata文件夹-和-后缀为class的文件"><a href="#例如该-gitignore文件可以忽略-hello-文件夹-metadata文件夹-和-后缀为class的文件" class="headerlink" title="例如该.gitignore文件可以忽略==hello 文件夹== == .metadata文件夹 ==和==后缀为class的文件=="></a>例如该.gitignore文件可以忽略==hello 文件夹== == .metadata文件夹 ==和==后缀为class的文件==</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">##ignore this file##</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#x2F;hello&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#x2F;.metadata&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">*.class</span></pre></td></tr></table></figure><h4 id="注意-如果该文件夹已经提交后再编辑-gitignore文件再提交是没用的在远端删除文件"><a href="#注意-如果该文件夹已经提交后再编辑-gitignore文件再提交是没用的在远端删除文件" class="headerlink" title="注意:如果该文件夹已经提交后再编辑.gitignore文件再提交是没用的在远端删除文件"></a>注意:如果该文件夹已经提交后再编辑.gitignore文件再提交是没用的在远端删除文件</h4><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>git上传到远端仓库操作</title>
      <link href="/2019/09/29/2019_9_29blog5/"/>
      <content type="html"><![CDATA[<p>git远程仓库已经建好了，本地文件已经存在了，现在要将本地代码推到git远程仓库保存。</p><p>解决办法如下：</p><p>1、（先进入项目文件夹）通过命令 git init 把这个目录变成git可以管理的仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git init</span></pre></td></tr></table></figure><p>2、把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git add .</span></pre></td></tr></table></figure><p>3、用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git commit -m &#39;first commit&#39;</span></pre></td></tr></table></figure><p>4、关联到远程库<br>git remote add origin 你的远程库地址<strong>(如果以前曾经关联过就不用再次关联了)</strong><br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;yangjinhaoaa&#x2F;yangjinhaoaa.github.io.git</span></pre></td></tr></table></figure><p>5、获取远程库与本地同步合并<strong>（如果远程库不为空必须做这一步，否则后面的提交会失败）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span></pre></td></tr></table></figure><p>6、把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git push -u origin master</span></pre></td></tr></table></figure><p>*、状态查询命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git status</span></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>windows环境变量的作用</title>
      <link href="/2019/09/28/2019_9_29blog4/"/>
      <content type="html"><![CDATA[<p>要在命令行中运行hugo需要自己配置环境变量才能在powershell或cmd中运行该应用程序.</p><p>windows中环境变量Path大概就起到一个路牌的作用,假设我输入了hugo命令系统就会在path中遍历各个路径直到找到hugo.exe</p><h5 id="下面就做一个sublime的环境变量来配置吧"><a href="#下面就做一个sublime的环境变量来配置吧" class="headerlink" title="下面就做一个sublime的环境变量来配置吧"></a>下面就做一个sublime的环境变量来配置吧</h5><p>在没配置sublime的path值时cmd输入sublim-text是这样子的</p><p><img src="/images/Snipaste_2019-09-29_06-07-46.jpg" alt="Alt text"></p><p>在我的电脑右击-&gt;属性-&gt;系统属性-&gt;高级-&gt;环境变量-&gt;系统变量-&gt;Path<br>添加sublime 的路径如图:</p><p><img src="/images/Snipaste_2019-09-29_06-18-10.jpg" alt="Alt text"></p><p>这样我们在cmd或者powershell里就可以用sublime-text命令调用它了</p><p><img src="/images/Snipaste_2019-09-29_06-24-14.jpg" alt></p><h4 id="END"><a href="#END" class="headerlink" title="END"></a>END</h4>]]></content>
      
      
    </entry>
    
    <entry>
      <title>git add . 命令下转义字符导致的错误解决</title>
      <link href="/2019/09/28/2019_9_29blog3/"/>
      <content type="html"><![CDATA[<h2 id="git-add-命令下转义字符导致的错误解决"><a href="#git-add-命令下转义字符导致的错误解决" class="headerlink" title="git add . 命令下转义字符导致的错误解决"></a>git add . 命令下转义字符导致的错误解决</h2><p>刚才输入git add .命令出现如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in ......  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">The file will have its original line endings in your working directory.</span></pre></td></tr></table></figure><h3 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h3><p>运行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span></pre></td></tr></table></figure><h3 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h3><p>换用以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git add -A</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">或者</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git add -all</span></pre></td></tr></table></figure><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>发送博客</title>
      <link href="/2019/09/28/2019_9_29blog2/"/>
      <content type="html"><![CDATA[<h2 id="发送博客"><a href="#发送博客" class="headerlink" title="发送博客"></a>发送博客</h2><h3 id="新建博客markdown文件，并编辑博客内容-文件名为-md"><a href="#新建博客markdown文件，并编辑博客内容-文件名为-md" class="headerlink" title="新建博客markdown文件，并编辑博客内容(文件名为 **.md )"></a>新建博客markdown文件，并编辑博客内容(文件名为 **.md )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd K:&#x2F;blog&#x2F;myblog</span></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hugo new post&#x2F;newBlog.md</span></pre></td></tr></table></figure><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hugo --theme=m10c --buildDrafts --baseUrl=<span class="string">"https://yangjinhaoaa.github.io/"</span></span></pre></td></tr></table></figure><h3 id="发布-就是同步到github的过程"><a href="#发布-就是同步到github的过程" class="headerlink" title="发布(就是同步到github的过程)"></a>发布(就是同步到github的过程)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> public</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">git add .</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"new blog added"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">git push -u origin master </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>..</span></pre></td></tr></table></figure><h4 id="博文中插入图片"><a href="#博文中插入图片" class="headerlink" title="博文中插入图片"></a>博文中插入图片</h4><p>将图片存到下面目录 /static/images/下<br>markdown中添加</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">![<span class="string">Snipaste_2019-11-08_20-43-48</span>](<span class="link">/images/Snipaste_2019-11-08_20-43-48.jpg</span>)</span></pre></td></tr></table></figure><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>My_first_blog</title>
      <link href="/2019/09/28/my_first_blog/"/>
      <content type="html"><![CDATA[<h3 id="HUGO搭建博客"><a href="#HUGO搭建博客" class="headerlink" title="HUGO搭建博客"></a>HUGO搭建博客</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>git clone <a href="https://github.com/vaga/hugo-theme-m10c.git" target="_blank" rel="noopener">https://github.com/vaga/hugo-theme-m10c.git</a> themes/m10c  </p><p>连接到远端： hugo –theme=m10c –baseUrl=”<a href="https://yangjinhaoaa.github.io/&quot;" target="_blank" rel="noopener">https://yangjinhaoaa.github.io/&quot;</a> –buildDrafts   </p><p>本地带主题启动： hugo server -t m10c –buildDrafts    </p>]]></content>
      
      
    </entry>
    
  
  
</search>
